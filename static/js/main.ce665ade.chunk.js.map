{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Title/Title.module.css","components/Title/Title.js","Services/api.js","redux/apiContacts/operations.js","redux/apiContacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","redux/apiContacts/actions.js","components/Filter/Filter.js","App.js","redux/apiContacts/reducers.js","redux/store.js","index.js"],"names":["module","exports","Title","text","className","s","BASE_URL","axios","defaults","baseURL","fetchContacts","a","get","fetchAddContact","contact","post","fetchDeleteContact","id","delete","api","getFetchContacts","createAsyncThunk","response","data","addContact","deleteContact","getContacts","state","contacts","getFilter","filter","getFilteredContacts","normalizedFilter","toLowerCase","name","includes","ContactForm","useState","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","handleChange","e","target","value","form","onSubmit","obj","preventDefault","map","el","alert","contactsOperations","label","htmlFor","onChange","input","type","placeholder","pattern","title","required","Button","variant","ContactList","useEffect","list","item","onClick","filterValue","createAction","Filter","changeFilter","useCallback","App","contactsList","createReducer","fulfilled","_","payload","rejected","action","loading","pending","error","contactFilter","actions","persistConfig","key","storage","blacklist","contactReducer","combineReducers","persistedContactReducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce665ade.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"input\":\"ContactForm_input__gm87B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"text\":\"ContactList_text__2dM24\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1E5tH\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Title_text__39Uar\"};","import PropTypes from \"prop-types\";\nimport s from \"./Title.module.css\";\n\nconst Title = ({ text }) => {\n  return (\n    <>\n      <h1 className={s.text}> {text} </h1>\n      {/* {children} */}\n    </>\n  );\n};\n\nTitle.propTypes = {\n  text: PropTypes.string,\n};\nexport default Title;\n","import axios from \"axios\";\n\nconst UNIQUE_ID = `61968c60af46280017e7e165`;\nconst BASE_URL = `https://${UNIQUE_ID}.mockapi.io/api/v1`;\n\naxios.defaults.baseURL = BASE_URL;\n\nconst fetchContacts = async () => {\n  return await axios.get('/contacts?page=1&limit=10')\n        // return axios.get(`/contacts?search=${query}&page=${page}&limit=5`)\n}\n\nconst fetchAddContact = async (contact) => {\n  return await axios.post('/contacts', contact)\n}\n\nconst fetchDeleteContact = async (id) => {\n  return await axios.delete(`/contacts/${id}`)\n}\nconst api = {\n  fetchContacts,\n  fetchAddContact,\n  fetchDeleteContact\n};\nexport default api;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport api from \"../../Services/api\";\n// import * as actions from \"./actions\";\n\n\nexport const getFetchContacts = createAsyncThunk( 'contacts/fetchContacts',\n    async () => {\n      const response = await api.fetchContacts();\n      return response.data\n    }\n)\nexport const addContact = createAsyncThunk('contacts/addContact',\n    async (contact) => {\n        const response = await api.fetchAddContact(contact)\n        return response.data\n})\n\nexport const deleteContact = createAsyncThunk('contacts/deleteContact',\n    async (id) => {\n        const response = await api.fetchDeleteContact(id)\n        return response.data.id\n})\n\n// export const filterValue = createAsyncThunk('filter/value',\n//     async () => { return })\n\n\n// export const getFetchContacts = () => async dispatch => {\n//     dispatch(actions.getContactRequest());\n//     try {\n//         const result = await api.fetchContacts();\n//         dispatch(actions.getContactSuccess(result.data));\n//     } catch (err) {\n//         dispatch(actions.getContactError(err))\n//     }\n// }\n\n// export const addContact = ({id, name, number}) => dispatch => {\n//      const contact = {id, name, number};\n//      dispatch(actions.addContactRequest(contact))\n//      api.fetchAddContact(contact)\n//         .then(res => dispatch(actions.addContactSuccess(res.data)))\n//         .catch( err => dispatch(actions.addContactError(err)))\n//  }\n\n// export const deleteContact = (id) => dispatch => {\n//     dispatch(actions.deleteContactRequest(id))\n//     api.fetchDeleteContact(id)\n//     .then(()=> dispatch(actions.deleteContactSuccess(id)))\n//     .catch( err => dispatch(actions.deleteContactError(err)))\n// }\n","export const getContacts = state => state.contacts;\n\nexport const getFilter = state => state.filter;\n\nexport const getFilteredContacts = state => {\n    const contacts = getContacts(state);\n    const filter = getFilter(state);\n    let normalizedFilter = filter.toLowerCase();\n        return contacts.filter((contact) =>\n          contact.name.toLowerCase().includes(normalizedFilter)\n         );\n    };\n","import s from \"./ContactForm.module.css\";\nimport { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {contactsOperations, contactsSelectors} from '../../redux/apiContacts';\n\nfunction ContactForm () {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n\n  const addNewContact = (obj) => {\n    const sameName = contacts.map((el) => el.name).includes(obj.name);\n    if (sameName) {\n      alert(`${obj.name} is already in contacts!`);\n    } else {\n      dispatch(contactsOperations.addContact({...obj}, obj.id));\n    }\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const contact = { name, number };\n    addNewContact(contact)\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label} htmlFor={name.id}>\n        Name\n      </label>\n      <input\n        id={name.id}\n        onChange={handleChange}\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        placeholder=\"Enter name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n      <label className={s.label} htmlFor={number.id}>\n        Number\n      </label>\n      <input\n        id={number.id}\n        onChange={handleChange}\n        className={s.input}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        placeholder=\"Enter number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n      />\n      <Button\n        type=\"submit\"\n        variant=\"secondary\"\n      >\n        Add contacts\n      </Button>\n    </form>\n  );\n}\n\nexport default ContactForm\n","import { useEffect } from \"react\";\nimport s from \"./ContactList.module.css\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {contactsOperations, contactsSelectors} from '../../redux/apiContacts';\n// import { getFilteredContacts } from '../../redux/apiContacts/selectors';\n// import { getFetchContacts, deleteContact } from '../../redux/apiContacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(contactsSelectors.getFilteredContacts);\n  const dispatch = useDispatch();\n//  const [query, setQuery] = useState(\"\");\n//  const [page, setPage] = useState(1);\n\n useEffect(() => {\n//     if (!query) return;\n//    setQuery()\n  dispatch(contactsOperations.getFetchContacts())\n//    dispatch(getContacts(query,page))\n  // setPage((prev) => prev + 1);\n   }, [dispatch]);\n\nreturn (\n  <ul className={s.list}>\n    {contacts.map(({id, name, number}) => (\n    <li key={id} className={s.item}>\n        <p className={s.text}>{name + \" : \" + number}</p>\n\n        <Button\n          id= {id}\n          variant=\"outline-secondary\"\n          onClick={() => (\n            dispatch(contactsOperations.deleteContact(id))\n          )}\n        >\n          Delete\n        </Button>\n      </li>\n    ))}\n  </ul>\n)\n};\n\n ContactList.propTypes = {\n   onDeleteContact: PropTypes.func,\n   contacts: PropTypes.arrayOf(\n     PropTypes.shape({\n       id: PropTypes.string,\n       name: PropTypes.string,\n       number: PropTypes.string,\n     })\n   ),\n };\nexport default ContactList\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const filterValue = createAction ('filter/value');\n// export const getContactRequest = createAction('getContacts/request');\n// export const getContactSuccess = createAction('getContacts/success');\n// export const getContactError = createAction('getContacts/error');\n\n// export const addContactRequest = createAction('addContacts/request');\n// export const addContactSuccess = createAction('addContacts/success');\n// export const addContactError = createAction('addContacts/error');\n\n// export const deleteContactRequest = createAction('deleteContacts/request');\n// export const deleteContactSuccess = createAction('deleteContacts/success');\n// export const deleteContactError = createAction('deleteContacts/error');\n","import PropTypes from \"prop-types\";\nimport s from \"./Filter.module.css\";\nimport { useCallback } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterValue } from '../../redux/apiContacts/actions';\nimport { getFilter } from '../../redux/apiContacts/selectors';\n\n\nconst Filter = () => {\n\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch()\n\n\n  const changeFilter = useCallback( e =>\n    {\n    // setFilter(e.target.value); // local\n    dispatch(filterValue(e.target.value));\n    },\n     [dispatch]);\n\n  return (\n  <label htmlFor={filter.id} value={filter} className={s.filter}>\n    Find contact by name\n    <input\n      id={filter.id}\n      onChange={changeFilter}\n      className={s.input}\n      type=\"text\"\n      name=\"filter\"\n      value={filter.value}\n      placeholder=\"Enter contact name\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n    />\n  </label>\n  )\n};\n\n Filter.propTypes = {\n   value: PropTypes.string,\n   onChange: PropTypes.func,\n };\nexport default Filter\n","import \"./App.css\";\nimport Title from './components/Title/Title'\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Title text=\"Phonebook\" className=\"title\"/>\n      <ContactForm />\n      <Title text=\"Contacts\" className=\"title\"/>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit'\nimport { getFetchContacts, addContact,deleteContact } from './operations'\nimport * as actions from \"./actions\";\n\n\nexport const contactsList = createReducer([], {\n  [getFetchContacts.fulfilled]: (_, {payload}) => payload,\n\n  [addContact.fulfilled]: (state, {payload}) => {return [...state, payload]},\n\n  [deleteContact.fulfilled]: (state, {payload}) => state.filter(({id}) => id !== payload ),\n\n  [getFetchContacts.rejected]: (_, action) => {},\n})\n\nexport const loading = createReducer(false, {\n  [getFetchContacts.pending]:(_, action)=> true,\n  [getFetchContacts.fulfilled]:(_, action)=> false,\n  [getFetchContacts.rejected]:(_, action)=> false,\n\n  [addContact.pending]:(_, action)=> true,\n  [addContact.fulfilled]:(_, action)=> false,\n  [addContact.rejected]:(_, action)=> false,\n\n  [deleteContact.pending]:(_, action)=> true,\n  [deleteContact.fulfilled]:(_, action)=> false,\n  [deleteContact.rejected]:(_, action)=> false,\n})\n\nexport const error = createReducer(null, {\n  [getFetchContacts.rejected]: (_, action) => action.payload,\n  [getFetchContacts.pending]:()=> null,\n})\n\nexport const contactFilter = createReducer ('', {\n   [actions.filterValue]: ( _, {payload}) => payload\n})\n\n// export const contactsList = createReducer([], {\n//   [actions.getContactSuccess]: (_, {payload}) => payload,\n//   [actions.addContactSuccess]: (state, {payload}) => {return [...state, payload]},\n//   [actions.deleteContactSuccess]: (state, {payload}) => state.filter(({id}) => id !== payload ),\n//   [actions.getContactError]: (_, action) => {},\n// })\n\n\n// export const loading = createReducer(false, {\n//   [actions.getContactRequest]:(_, action)=> true,\n//   [actions.getContactSuccess]:(_, action)=> false,\n//   [actions.getContactError]:(_, action)=> false,\n\n//   [actions.addContactRequest]:(_, action)=> true,\n//   [actions.addContactSuccess]:(_, action)=> false,\n//   [actions.addContactError]:(_, action)=> false,\n\n//   [actions.deleteContactRequest]:(_, action)=> true,\n//   [actions.deleteContactSuccess]:(_, action)=> false,\n//   [actions.deleteContactError]:(_, action)=> false,\n// })\n\n// export const error = createReducer(null, {\n//   [actions.getContactError]: (_, action) => action.payload,\n//   [actions.getContactRequest]:()=> null,\n// })\n\n// export const contactFilter = createReducer ('', {\n//    [actions.filterValue]: ( _, {payload}) => payload\n// })\n","import { configureStore, getDefaultMiddleware,combineReducers } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n  } from \"redux-persist\"\nimport storage from 'redux-persist/lib/storage'\nimport { contactsList, contactFilter, loading, error } from './apiContacts/reducers';\n\n\n const persistConfig = {\n     key: 'contacts',\n     storage,\n     blacklist: ['filter'],\n }\n\nconst contactReducer = combineReducers({\n    contacts: contactsList,\n    filter: contactFilter,\n    loading,\n    error,\n  });\n\nconst persistedContactReducer = persistReducer(persistConfig, contactReducer);\n\nconst middleware = [...getDefaultMiddleware ({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n}),\nlogger\n];\n\nconst store = configureStore({\n     reducer: persistedContactReducer,\n    // { contacts: persistedContactReducer,\n    //  apiContacts: apiContacts},\n    middleware,\n    devTools: process.env.NODE_ENV === 'development',\n})\n const persistor = persistStore (store);\n\nexport default {store, persistor};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n    <PersistGate loading=\"Loading...\" persistor={store.persistor}>\n      <Router>\n        <App />\n      </Router>\n    </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}