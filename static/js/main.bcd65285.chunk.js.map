{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Title/Title.module.css","components/Title/Title.js","redux/contacts/actions.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/reducers.js","redux/store.js","index.js"],"names":["module","exports","Title","text","className","s","addContact","createAction","deleteContact","filterValue","getContacts","state","contacts","getFilter","filter","getFilteredContacts","normalizedFilter","toLowerCase","contact","name","includes","nameId","uuid","numberId","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","form","onSubmit","preventDefault","obj","id","map","el","alert","label","htmlFor","onChange","input","type","placeholder","pattern","title","required","Button","variant","ContactList","list","item","onClick","Filter","changeFilter","useCallback","App","contactsList","createReducer","initialContacts","payload","contactFilter","_","persistConfig","key","storage","blacklist","contactReducer","combineReducers","persistedContactReducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.bcd65285.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"input\":\"ContactForm_input__gm87B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"text\":\"ContactList_text__2dM24\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1E5tH\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Title_text__39Uar\"};","import PropTypes from \"prop-types\";\nimport s from \"./Title.module.css\";\n\nconst Title = ({ text }) => {\n  return (\n    <>\n      <h1 className={s.text}> {text} </h1>\n      {/* {children} */}\n    </>\n  );\n};\n\nTitle.propTypes = {\n  text: PropTypes.string,\n};\nexport default Title;\n","// import { v4 as uuid } from \"uuid\";\nimport { createAction } from '@reduxjs/toolkit';\n\n\n//  export const addContact = createAction ('contact/add', contact => ({ payload:{\n//          id: uuid(),\n//          contact\n//      }}));\n\nexport const addContact = createAction ('contact/add');\n\nexport const deleteContact = createAction ('contact/delete');\n\nexport const filterValue = createAction ('filter/value');\n\n\n// export const addContact = contact => ({\n//     type: 'contact/add',\n//     payload: contact,\n// });\n// export const deleteContact = id => ({\n//     type: 'contact/delete',\n//     payload: {id},\n// });\n// export const filterValue = value => ({\n//     type: 'filter/value',\n//     payload: value,\n// });\n","export const getContacts = state => state.contacts;\n\nexport const getFilter = state => state.filter;\n\nexport const getFilteredContacts = state => {\n    const contacts = getContacts(state);\n    const filter = getFilter(state);\n    let normalizedFilter = filter.toLowerCase();\n        return contacts.filter((contact) =>\n          contact.name.toLowerCase().includes(normalizedFilter)\n         );\n    };\n","import s from \"./ContactForm.module.css\";\nimport { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/actions';\nimport {getContacts} from '../../redux/contacts/selectors';\n\nconst nameId = uuid();\nconst numberId = uuid();\n\nfunction ContactForm () {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n\n  const addNewContact = (obj) => {\n    const sameName = contacts.map((el) => el.name).includes(obj.name);\n    if (sameName) {\n      alert(`${obj.name} is already in contacts!`);\n    } else {\n      dispatch(addContact({...obj}, obj.id));\n    }\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const contact = {id: uuid(), name, number };\n    addNewContact(contact)\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label} htmlFor={nameId}>\n        Name\n      </label>\n      <input\n        id={nameId}\n        onChange={handleChange}\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        placeholder=\"Enter name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n      <label className={s.label} htmlFor={numberId}>\n        Number\n      </label>\n      <input\n        id={numberId}\n        onChange={handleChange}\n        className={s.input}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        placeholder=\"Enter number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n      />\n      <Button\n        type=\"submit\"\n        variant=\"secondary\"\n      >\n        Add contacts\n      </Button>\n    </form>\n  );\n}\n\nexport default ContactForm\n","import s from \"./ContactList.module.css\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/actions'\n\nconst ContactList = () => {\nconst contacts = useSelector(getFilteredContacts);\nconst dispatch = useDispatch();\n\nreturn (\n  <ul className={s.list}>\n    {contacts.map(({id, name, number}) => (\n    <li key={id} className={s.item}>\n        <p className={s.text}>{name + \" : \" + number}</p>\n\n        <Button\n          id= {id}\n          variant=\"outline-secondary\"\n          onClick={() => (\n            dispatch(deleteContact(id))\n          )}\n        >\n          Delete\n        </Button>\n      </li>\n    ))}\n  </ul>\n)\n};\n\n ContactList.propTypes = {\n   onDeleteContact: PropTypes.func,\n   contacts: PropTypes.arrayOf(\n     PropTypes.shape({\n       id: PropTypes.string,\n       name: PropTypes.string,\n       number: PropTypes.string,\n     })\n   ),\n };\nexport default ContactList\n","import PropTypes from \"prop-types\";\nimport { v4 as uuid } from \"uuid\";\nimport s from \"./Filter.module.css\";\nimport { useCallback } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterValue } from '../../redux/contacts/actions';\nimport { getFilter } from '../../redux/contacts/selectors';\n\nconst nameId = uuid();\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch()\n  const changeFilter = useCallback( e =>\n    {\n    // setFilter(e.target.value); // local\n    dispatch(filterValue(e.target.value));\n    },\n     [dispatch]);\n\n  return (\n  <label htmlFor={nameId} value={filter} className={s.filter}>\n    Find contact by name\n    <input\n      id={nameId}\n      onChange={changeFilter}\n      className={s.input}\n      type=\"text\"\n      name=\"filter\"\n      value={filter.value}\n      placeholder=\"Enter contact name\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n    />\n  </label>\n  )\n};\n\n Filter.propTypes = {\n   value: PropTypes.string,\n   onChange: PropTypes.func,\n };\nexport default Filter\n","import \"./App.css\";\nimport Title from './components/Title/Title'\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Title text=\"Phonebook\" className=\"title\"/>\n      <ContactForm />\n      <Title text=\"Contacts\" className=\"title\"/>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import initialContacts from \"../../dataBase/contacts.json\";\nimport { addContact, deleteContact, filterValue} from './actions'\nimport { createReducer } from '@reduxjs/toolkit'\n// import { combineReducers } from 'redux'\n\n\nexport const contactsList = createReducer(initialContacts, {\n  [addContact]: (state, {payload}) => [...state, payload],\n  [deleteContact]: (state, {payload}) => state.filter(({id}) => id !== payload )\n})\n\nexport const contactFilter = createReducer ('', {\n  [filterValue]: ( _, {payload}) => payload\n})\n\n// export const contactsList = (state = initialContacts, action) => {\n//   switch (action.type) {\n//     case 'contact/add':\n//       return [...state, action.payload];\n//     case 'contact/delete':\n//       return state.filter(contact => contact.id !== action.payload.id);\n//     default:\n//       return state;\n//   }\n// };\n// export const contactFilter = (state= '', action ) =>{\n//   switch (action.type) {\n//     case 'filter/value':\n//       return action.payload;\n//     default:\n//       return state;\n//   }\n// }\n\n// export default contactReducer = combineReducers({contacts: contactsList, filter: contactFilter})\n","// import { createStore } from \"redux\";\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport { configureStore, getDefaultMiddleware,combineReducers } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n  } from \"redux-persist\"\nimport storage from 'redux-persist/lib/storage'\nimport  {contactsList, contactFilter } from \"./contacts/reducers\";\n\n// export const store = createStore(contactReducer,composeWithDevTools());\n\nconst persistConfig = {\n    key: 'contacts',\n    storage,\n    blacklist: ['filter'],\n}\nconst contactReducer = combineReducers({\n    contacts: contactsList,\n    filter: contactFilter,\n  });\n\nconst persistedContactReducer = persistReducer(persistConfig, contactReducer);\n\nconst middleware = [...getDefaultMiddleware ({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n}), logger ];\n\nconst store = configureStore({\n    reducer: persistedContactReducer,\n    middleware,\n    devTools: process.env.NODE_ENV === 'development',\n})\nconst persistor = persistStore (store);\n\nexport default { store, persistor }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n    <PersistGate loading=\"Loading...\" persistor={store.persistor}>\n      <Router>\n        <App />\n      </Router>\n    </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}